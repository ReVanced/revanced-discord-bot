name: Release

on:
  push:
    branches: [main, dev]

  pull_request:

  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "latest"

      - name: Setup Rust toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy

      - name: Set up cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: "true"

      - name: cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target=x86_64-unknown-linux-musl
          use-cross: true

      - name: cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --no-deps -- -D warnings

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: revanced-discord-bot
          path: target/x86_64-unknown-linux-musl/release/revanced-discord-bot

      - name: Setup semantic-release
        if: github.event_name != 'pull_request'
        run: npm install -g semantic-release @semantic-release/git @semantic-release/changelog -D

      - name: Release
        if: github.event_name != 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
  docker:
    strategy:
      fail-fast: false
      matrix:
        arch:
          [
            [x86_64-unknown-linux-gnu, linux/amd64],
            [aarch64-unknown-linux-gnu, linux/arm64/v8],
          ]
    env:
      CARGO_TERM_COLOR: always
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v3

      - name: Setup QEMU
        id: qemu
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup Rust toolchain
        id: rust
        run: rustup toolchain install stable --profile minimal

      - name: Setup Rust Cache
        id: rust-cache
        uses: Swatinem/rust-cache@v2

      - name: Login to DockerHub
        id: login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build
        id: rust_build
        run: cargo build --release --target=${{ matrix.arch[0] }}

      - name: Build Image and Push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.arch[1] }}
          cache-to: type=gha,mode=max,ignore-error=true
          cache-from: type=gha
          push: true
          tags: revanced/revanced-discord-bot:latest
